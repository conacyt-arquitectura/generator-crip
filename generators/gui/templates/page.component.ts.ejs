import { Component, Vue, Inject } from 'vue-property-decorator';

import CatalogoService from '@/shared/catalogo/catalogo.service';
import AlertService from '@/shared/alert/alert.service';

import { <%= page.name.pascalCase%>, <%= page.name.pascalCase%>Api } from '@/shared/perfil-usuario/api';
import { required, minLength, maxLength, helpers } from 'vuelidate/lib/validators';

    <%_ for (const idx in page.properties) { _%>
      <%_ let campo = page.properties[idx]; _%>
      <%_ if (campo.validations.regex) { _%>
const <%= campo.name.constantCase%> = helpers.regex(
  '<%=campo.name.camelCase%>',
  <%=campo.validations.regex%>
);
        <%_ } _%>
    <%_ }; _%>

const validations: any = {
  <%= page.name.camelCase%>: {
  <%_ for (const idx in page.properties) { _%>
    <%_ let campo = page.properties[idx]; _%>
    <%_ if (campo.uiType === 'cards-list') { _%>
      <%- include('page-validations', {campo: campo}); %>
      <%= campo.items.name.singular%> : {
      <%_ for (const iidx in campo.items.properties) { _%>
        <%_ let prop = campo.items.properties[iidx]; _%>
          <%- include('page-validations', {campo: prop}); %>
      <%_ } _%>
          }
    <%_ } else { _%>
    <%- include('page-validations', {campo: campo}); %>
    <%_ } _%>
  <%_ }; _%>
  },
};

@Component({
  validations,
})
export default class <%= page.name.pascalCase%>Component extends Vue {
  @Inject('alertService') private alertService: () => AlertService;
  @Inject('<%= page.name.camelCase%>Api') private <%= page.name.camelCase%>Api: () => <%= page.name.pascalCase%>Api;
  @Inject('catalogoService') private catalogoService: () => CatalogoService;

  public <%= page.name.camelCase%>: <%= page.name.pascalCase%> = {};
  public isSaving = false;
  public currentLanguage = '';

<%_ for (const idx in page.properties) { _%>
    <%_ let campo = page.properties[idx]; _%>
  <%_ if (campo.uiType === 'cards-list') { _%>
  public <%= campo.items.name.singular%>: <%= campo.items.name.pascalCase%> = {};
  public <%= campo.items.name.plural%>Cards: Array<any> = [];
    <%_ for (const iidx in campo.items.properties) { _%>
      <%_ let prop = campo.items.properties[iidx]; _%>
  <%- include('page-variables', {campo: prop}); %>
    <%_ } _%>
  <%_ } else { _%>
  <%- include('page-variables', {campo: campo}); %>
  <%_ } _%>
<%_ }; _%>

  beforeRouteEnter(to, from, next) {
    next(vm => {
      if (to.params.campoId) {
        vm.retrieveCampo(to.params.campoId);
      }
    });
  }

  created(): void {
    this.currentLanguage = this.$store.getters.currentLanguage;
    this.$store.watch(
      () => this.$store.getters.currentLanguage,
      () => {
        this.currentLanguage = this.$store.getters.currentLanguage;
      }
    );
  }

  mounted(): void {
    this.initCatalogos();
    this.get();
  }

  public initCatalogos(): void {
    <%_ for (const idx in page.properties) { _%>
      <%_ let campo = page.properties[idx]; _%>
      <%_ if (campo.uiType === 'cards-list') { _%>
        <%_ for (const iidx in campo.items.properties) { _%>
          <%_ let prop = campo.items.properties[iidx]; _%>
  <%- include('page-catalogs', {campo: prop}); %>
          <%_ } _%>
        <%_ } else { _%>
  <%- include('page-catalogs', {campo: campo}); %>
        <%_ } _%>
    <%_ }; _%>
  }

  public get(): void {
    this.<%= page.name.camelCase%>Api()
      .get<%= page.name.pascalCase%>()
      .then(res => {
        this.<%= page.name.camelCase%> = res.data;
      })
      .catch( err => {
        if (err.response.data.status === 404) {
          this.<%= page.name.camelCase%> = {};
        } else {
          this.alertService().showError(this, err.response.data.detail);
        }
      });
  }

  public save(): void {
    this.<%= page.name.camelCase%>Api()
      .update<%= page.name.pascalCase%>ById(1, this.<%= page.name.camelCase%>)
      .then(res => {
        this.alertService().showSuccess(this, this.$t('global.messages.saved.detail', { section: this.$t('<%= page.name.dashCase%>.title') }).toString());
      })
      .catch(err => {
        this.alertService().showError(this, this.$t('global.messages.error.saved', { section: this.$t('<%= page.name.dashCase%>.title') }).toString());
      });
  }

  public cancel(): void {
    this.$router.push('/');
  }

  public previousState(): void {
    this.$router.go(-1);
  }

  public initRelationships(): void {}

  <%_ for (const idx in page.properties) { _%>
    <%_ let campo = page.properties[idx]; _%>
    <%_ if (campo.uiType === 'cards-list') { _%>
  public add<%= campo.items.name.pascalCase%>(): void {
    this.<%= campo.items.name.plural%>.push(this.<%= campo.items.name.singular%>);
    this.<%= campo.items.name.plural%>Cards.push(this.creaRegistroCard(this.<%= campo.items.name.singular%>));
    this.<%= campo.items.name.singular%> = {};
  }

  public remove<%= campo.items.name.pascalCase%>(removeId): void {
    this.<%= campo.items.name.plural%>.splice(removeId, 1);
    this.<%= campo.items.name.plural%>Cards.splice(removeId, 1);
  }

  public mapCards() {
    if (this.<%= campo.items.name.plural%>) {
      this.<%= campo.items.name.plural%>.forEach(e => {
        this.<%= campo.items.name.plural%>Cards.push(this.creaRegistroCard(e));
      });
    }
  }

  private creaRegistroCard(val): any {
    return {
      title: val,
      description: '',
      footer: '',
      icon: '',
    };
  }
  <%_ }_%>
  <%_ }; _%>
}
