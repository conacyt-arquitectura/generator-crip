import { Component, Vue, Inject } from 'vue-property-decorator';

import AlertService from '@/shared/alert/alert.service';

import { I<%= seccion.props.pascalCase%>, <%= seccion.props.pascalCase%> } from '@/shared/model/msPerfil/<%= seccion.props.dashCase%>.model';
import <%= seccion.props.pascalCase%>Service from './<%= seccion.props.dashCase%>.service';

const validations: any = {

  <%= seccion.props.camelCase%>: {
    <%_ for (const mayBeSubseccion in seccion) { _%>
      <%_ if (mayBeSubseccion != 'props') { _%>
      <%= seccion[mayBeSubseccion].props.camelCase%>:{
        <%_ seccion[mayBeSubseccion].campos.forEach(campo => { _%>
        <%= campo.camelCase%>: {},
        <%_ }); _%>
      },
      <%_ } _%>
    <%_ } _%>
  },
};

@Component({
  validations,
})
export default class <%= seccion.props.pascalCase%>Component extends Vue {
  @Inject('<%= seccion.props.camelCase%>') private <%= seccion.props.camelCase%>Service: () => <%= seccion.props.pascalCase%>Service;
  @Inject('alertService') private alertService: () => AlertService;

  public <%= seccion.props.camelCase%>: I<%= seccion.props.pascalCase%> = new <%= seccion.props.pascalCase%>;
  public generoValues: string[] = Object.keys(Genero);
  public isSaving = false;
  public currentLanguage = '';

  beforeRouteEnter(to, from, next) {
    next(vm => {
      if (to.params.campoId) {
        vm.retrieveCampo(to.params.campoId);
      }
    });
  }

  created(): void {
    this.currentLanguage = this.$store.getters.currentLanguage;
    this.$store.watch(
      () => this.$store.getters.currentLanguage,
      () => {
        this.currentLanguage = this.$store.getters.currentLanguage;
      }
    );
  }

  public save(): void {
    this.isSaving = true;
    if (this.campo.id) {
      this.campoService()
        .update(this.campo)
        .then(param => {
          this.isSaving = false;
          this.$router.go(-1);
          const message = this.$t('msPerfilApp.msPerfilCampo.updated', { param: param.id });
          return this.$root.$bvToast.toast(message.toString(), {
            toaster: 'b-toaster-top-center',
            title: 'Info',
            variant: 'info',
            solid: true,
            autoHideDelay: 5000,
          });
        })
        .catch(error => {
          this.isSaving = false;
          this.alertService().showHttpError(this, error.response);
        });
    } else {
      this.campoService()
        .create(this.campo)
        .then(param => {
          this.isSaving = false;
          this.$router.go(-1);
          const message = this.$t('msPerfilApp.msPerfilCampo.created', { param: param.id });
          this.$root.$bvToast.toast(message.toString(), {
            toaster: 'b-toaster-top-center',
            title: 'Success',
            variant: 'success',
            solid: true,
            autoHideDelay: 5000,
          });
        })
        .catch(error => {
          this.isSaving = false;
          this.alertService().showHttpError(this, error.response);
        });
    }
  }

  public retrieveCampo(campoId): void {
    this.campoService()
      .find(campoId)
      .then(res => {
        this.campo = res;
      })
      .catch(error => {
        this.alertService().showHttpError(this, error.response);
      });
  }

  public previousState(): void {
    this.$router.go(-1);
  }

  public initRelationships(): void {}
}
